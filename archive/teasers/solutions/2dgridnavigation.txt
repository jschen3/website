text:
0
The trick like any other recursive problem is to think how to break the problem into smaller problems. Is the problem easier after a single move.
In this problem this is obviously true. If you are navigating from 0,0 to 2,2. The problem is easier if you are already at (1,0) and easier still at (2,0). After (2,0) you can only move upwards or increase in Y. 
text:
1
After that thought lets think about the base case, or when you are finished. In this problem it obviously when you reach your destination. When are at the point there is 1 way to get there just be there.
text:
2
Next as you need to sum all the ways you need to traverse all the ways when there are 3 cases you need to consider. When the currentX is equal to the destinationX; when the currentY is equal to destinationY and when niether of the 2 previous conditions are true. Another way to think of this is like a binary tree traversal. You traverse right and left when you can and either right or left in the cases where you can only traverse once. 
text:
3
The last case is to consider what you want to do with all these ways and directions. In this case you can just sum them together as the base case returns 1.
code:
4
public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	String cord1=sc.nextLine();
	String cord2=sc.nextLine();
	String[] cord1Split = cord1.split(",");
	String[] cord2Split = cord2.split(",");
	int cord1X=Integer.parseInt(cord1Split[0]);
	int cord1Y=Integer.parseInt(cord1Split[1]);
	int cord2X=Integer.parseInt(cord2Split[0]);
	int cord2Y=Integer.parseInt(cord2Split[1]);
	//System.out.println("Cord1X:"+cord1X + " Cord1Y:"+cord1Y);
	//System.out.println("Cord2X:"+cord2X + " Cord2Y:"+cord2Y);
	System.out.println(navWays(cord1X,cord1Y,cord2X,cord2Y));
}
public static int navWays(int currentX,int currentY,int destX,int destY){
	if (destX<currentX || destY<currentY){
		return -1;
	}
	if (currentX==destX && currentY==destY){
		return 1;
	}
	else if (currentX==destX){
		return navWays(currentX,currentY+1,destX,destY);
	}
	else if (currentY==destY){
		return navWays(currentX+1,currentY,destX,destY);
	}
	else{
		return navWays(currentX+1,currentY,destX,destY)+navWays(currentX,currentY+1,destX,destY);
	}
}