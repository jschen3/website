text:
0
Lets start with the binary tree. A binary tree essentially is a root with 2 children. So Lets create one.
code:
1
public class Node {
    private Node left;
    private Node right;
    int value;
     
    public Node(int value) {
        left = null;
        right = null;
        this.value = value;
    }
    public void setLeft(Node left){
    	this.left=left;
    }
    public Node getLeft(){
    	return this.left;
    }
    public void setRight(Node right){
    	this.right=right;
    }
    public Node getRight(){
    	return this.right;
    }
}
###
text:
2
Now lets add some children
code:
3
public static void main(String args[]){
	Node root = new Node(1);
	Node left = new Node(2);
	Node leftLeft = new Node(6);
	Node leftRight = new Node(5);
	Node rigtLeft = new Node(9);
	Node rightRight = new Node(11);
	Node rightRightRight= new Node(3);
	Node rightRightLeft=New Node(7);

	//configure left
	left.setLeft(leftLeft);
	left.setRigt(leftRight);

	//configure right right
	rightRight.setRight(rightRightRight);
	rightRight.setLeft(rightRightLeft);

	//configure right
	right.setRight(rightRight);
	right.setLeft(rightLeft);

	//configure root
	root.setLeft(left);
	root.setRight(right);
}
###
text:
4
Now lets explain the least common ancestor function. First as its a tree its always easier to use recursion. Then lets think of the possibilities that can occur. There are roughly 2 case. First the root or the node you are at is the common ancestor. That occurs if you found one node and you find the node you want on 2 sides. The other case is the least is to one of the sides and the 2 nodes are a children. Then lets think of the base cases. The base cases are if the root is null in which case there are no common ancestors. Or the root is one of the original nodes you want to find the common ancestor to; in which case the root is the common ancestor. After that we are almost done. We just need the recursive step. 
code:
5
left = findLowestCommonAncestor(root.getLeft(), a, b);
right = findLowestCommonAncestor(root.getRight(), a, b);
###
text:
6
a and b if its not clear are the nodes you want to find the common ancestor to. Lastly all together.
code:
7
public static Node findLowestCommonAncestor(Node root, Node a, Node b) {
    Node left = null;
    Node right = null;

    if (root == null) {
        return null;
    }
    /**
     * If Node a or Node b is also the root, then the root itself is lowest common ancestor
     */
    if (root == a || root == b) {
        return root;
    }
    left = findLowestCommonAncestor(root.getLeft(), a, b);
    right = findLowestCommonAncestor(root.getRight(), a, b);
    /**
     * If Node a and Node b lie in the left, their Lowest Common Ancestor is in the left.
     * If Node a and Node b lie in the right,their Lowest Common Ancestor is in the right.
     *
     * Otherwise, root is the Lowest common ancestor.
     */
    if (left != null && right != null) {
        return root;
    }
    if (left!=null)
    	return left;
    else
    	return right;
}